{"version":3,"sources":["jquery.growl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["// Generated by CoffeeScript 1.8.0\n\n/*\n jQuery Growl\n Copyright 2015 Kevin Sylvestre\n 1.2.5\n */\n\n(function() {\n    \"use strict\";\n    var $, Animation, Growl,\n        __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n    $ = jQuery;\n\n    Animation = (function() {\n        function Animation() {}\n\n        Animation.transitions = {\n            \"webkitTransition\": \"webkitTransitionEnd\",\n            \"mozTransition\": \"mozTransitionEnd\",\n            \"oTransition\": \"oTransitionEnd\",\n            \"transition\": \"transitionend\"\n        };\n\n        Animation.transition = function($el) {\n            var el, result, type, _ref;\n            el = $el[0];\n            _ref = this.transitions;\n            for (type in _ref) {\n                result = _ref[type];\n                if (el.style[type] != null) {\n                    return result;\n                }\n            }\n        };\n\n        return Animation;\n\n    })();\n\n    Growl = (function() {\n        Growl.settings = {\n            namespace: 'growl',\n            duration: 3200,\n            close: \"&#215;\",\n            location: \"default\",\n            style: \"default\",\n            size: \"medium\"\n        };\n\n        Growl.growl = function(settings) {\n            if (settings == null) {\n                settings = {};\n            }\n            this.initialize();\n            return new Growl(settings);\n        };\n\n        Growl.initialize = function() {\n            return $(\"body:not(:has(#growls))\").append('<div id=\"growls\" />');\n        };\n\n        function Growl(settings) {\n            if (settings == null) {\n                settings = {};\n            }\n            this.html = __bind(this.html, this);\n            this.$growl = __bind(this.$growl, this);\n            this.$growls = __bind(this.$growls, this);\n            this.animate = __bind(this.animate, this);\n            this.remove = __bind(this.remove, this);\n            this.dismiss = __bind(this.dismiss, this);\n            this.present = __bind(this.present, this);\n            this.cycle = __bind(this.cycle, this);\n            this.close = __bind(this.close, this);\n            this.unbind = __bind(this.unbind, this);\n            this.bind = __bind(this.bind, this);\n            this.render = __bind(this.render, this);\n            this.settings = $.extend({}, Growl.settings, settings);\n            this.$growls().attr('class', this.settings.location);\n            this.render();\n        }\n\n        Growl.prototype.render = function() {\n            var $growl;\n            $growl = this.$growl();\n            this.$growls().append($growl);\n            if (this.settings[\"static\"] != null) {\n                this.present();\n            } else {\n                this.cycle();\n            }\n        };\n\n        Growl.prototype.bind = function($growl) {\n            if ($growl == null) {\n                $growl = this.$growl();\n            }\n            return $growl.on(\"contextmenu\", this.close).find(\".\" + this.settings.namespace + \"-close\").on(\"click\", this.close);\n        };\n\n        Growl.prototype.unbind = function($growl) {\n            if ($growl == null) {\n                $growl = this.$growl();\n            }\n            return $growl.off(\"contextmenu\", this.close).find(\".\" + this.settings.namespace + \"-close\").off(\"click\", this.close);\n        };\n\n        Growl.prototype.close = function(event) {\n            var $growl;\n            event.preventDefault();\n            event.stopPropagation();\n            $growl = this.$growl();\n            return $growl.stop().queue(this.dismiss).queue(this.remove);\n        };\n\n        Growl.prototype.cycle = function() {\n            var $growl;\n            $growl = this.$growl();\n            return $growl.queue(this.present).delay(this.settings.duration).queue(this.dismiss).queue(this.remove);\n        };\n\n        Growl.prototype.present = function(callback) {\n            var $growl;\n            $growl = this.$growl();\n            this.bind($growl);\n            return this.animate($growl, \"\" + this.settings.namespace + \"-incoming\", 'out', callback);\n        };\n\n        Growl.prototype.dismiss = function(callback) {\n            var $growl;\n            $growl = this.$growl();\n            this.unbind($growl);\n            return this.animate($growl, \"\" + this.settings.namespace + \"-outgoing\", 'in', callback);\n        };\n\n        Growl.prototype.remove = function(callback) {\n            this.$growl().remove();\n            return callback();\n        };\n\n        Growl.prototype.animate = function($element, name, direction, callback) {\n            var transition;\n            if (direction == null) {\n                direction = 'in';\n            }\n            transition = Animation.transition($element);\n            $element[direction === 'in' ? 'removeClass' : 'addClass'](name);\n            $element.offset().position;\n            $element[direction === 'in' ? 'addClass' : 'removeClass'](name);\n            if (callback == null) {\n                return;\n            }\n            if (transition != null) {\n                $element.one(transition, callback);\n            } else {\n                callback();\n            }\n        };\n\n        Growl.prototype.$growls = function() {\n            return this.$_growls != null ? this.$_growls : this.$_growls = $('#growls');\n        };\n\n        Growl.prototype.$growl = function() {\n            return this.$_growl != null ? this.$_growl : this.$_growl = $(this.html());\n        };\n\n        Growl.prototype.html = function() {\n            return \"<div class='\" + this.settings.namespace + \" \" + this.settings.namespace + \"-\" + this.settings.style + \" \" + this.settings.namespace + \"-\" + this.settings.size + \"'>\\n  <div class='\" + this.settings.namespace + \"-close'>\" + this.settings.close + \"</div>\\n  <div class='\" + this.settings.namespace + \"-title'>\" + this.settings.title + \"</div>\\n  <div class='\" + this.settings.namespace + \"-message'>\" + this.settings.message + \"</div>\\n</div>\";\n        };\n\n        return Growl;\n\n    })();\n\n    $.growl = function(options) {\n        if (options == null) {\n            options = {};\n        }\n        return Growl.growl(options);\n    };\n\n    $.growl.error = function(options) {\n        var settings;\n        if (options == null) {\n            options = {};\n        }\n        settings = {\n            title: \"Error!\",\n            style: \"error\"\n        };\n        return $.growl($.extend(settings, options));\n    };\n\n    $.growl.notice = function(options) {\n        var settings;\n        if (options == null) {\n            options = {};\n        }\n        settings = {\n            title: \"Notice!\",\n            style: \"notice\"\n        };\n        return $.growl($.extend(settings, options));\n    };\n\n    $.growl.warning = function(options) {\n        var settings;\n        if (options == null) {\n            options = {};\n        }\n        settings = {\n            title: \"Warning!\",\n            style: \"warning\"\n        };\n        return $.growl($.extend(settings, options));\n    };\n\n}).call(this);"],"sourceRoot":"/source/"}